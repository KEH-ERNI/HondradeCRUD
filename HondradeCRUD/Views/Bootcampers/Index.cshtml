@model List<Bootcamper>
@{
}

<div class="row gap-3 p-0 m-0 ">
     <div class="p-0 m-0 row" style="background-color: #EDEDF0; border-bottom: 1px solid #ECECEE">
        <div class="row align-items-center py-5 px-5 gap-4">
            <div class="text-left row col-8 p-0">
              <h1 style="color: #233770; font-weight: bold">BOOTCAMP TRAINEES</h1>
              <div>Meet the learners in ERNIAcademy.</div>
          </div>
            <div class="col-4 d-flex justify-content-end align-items-end">
                <img src="~/images/logo.png" width="70" class="img-fluid" />
            </div>
        </div>
    </div>

    <div></div>

       <div class="container p-3">
        <div class="row align-items-center justify-content-between mb-3 gap-0">
            <div class="col-lg-8 col-10">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text p-3"><i class="fa-solid fa-magnifying-glass"></i></span>
                    </div>
                    <input type="text" class="form-control" id="search" placeholder="Search by name...">
                </div>
            </div>
            <div class="col-lg-auto col-2">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary" type="button" id="filterCategory" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-filter py-2 px-1"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" data-category="All" style="cursor: pointer;">All</a></li>
                        <li><a class="dropdown-item" data-category="Female" style="cursor: pointer;">Female</a></li>
                        <li><a class="dropdown-item" data-category="Male" style="cursor: pointer;">Male</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-lg-3 col-sm-12 mt-3 mt-lg-0">
                <a type="button" class="btn btn-primary w-100 py-2 text-white" style="background-color: #03367E;" asp-controller="Bootcampers" asp-action="Create">
                    <i class="fa-solid fa-plus"></i> <span class="ms-2">ADD BOOTCAMPER</span>
                </a>
            </div>
        </div>

         <div class="table-responsive">
           <table class="table table-striped-columns">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th class="sortable-header">         
                             Name
                            <i id="sortNameAsc" class="fa-solid fa-arrow-up-z-a" style="cursor: pointer;"></i>
                            <i id="sortNameDesc" class="fa-solid fa-arrow-down-z-a" style="cursor: pointer; display: none;"></i>
                        </th>
                        <th>Age</th>
                        <th>Birthday</th>
                        <th>Gender</th>
                        <th>Address</th>
                        <th>Phone</th>
                        <th class="text-center">Image</th>
                        <th>Created</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="table">
                    @await Html.PartialAsync("Shared/_BootcamperList", Model)
                </tbody>
            </table>
        </div>
    </div>

      
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert" style="position: absolute; top: 1rem; right: 1rem; z-index: 1050;">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert" style="position: absolute; top: 1rem; right: 1rem; z-index: 1050;">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('search');
            const tableBody = document.getElementById('table');
            const filterButton = document.getElementById('filterCategory');
            const filterItems = document.querySelectorAll('.dropdown-item');
            const sortNameAsc = document.getElementById('sortNameAsc');
            const sortNameDesc = document.getElementById('sortNameDesc');

            let selectedCategory = "All";
            let sortOrder = '';
            let debounceTimer;

            function updateTable() {
                const query = searchInput.value;
                const category = selectedCategory;
                const sort = sortOrder;

                fetch(`/Bootcampers/Update?query=${encodeURIComponent(query)}&gender=${encodeURIComponent(category)}&sort=${encodeURIComponent(sort)}`)
                    .then(response => response.text())
                    .then(data => {
                        tableBody.innerHTML = data;
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                        tableBody.innerHTML = '<tr><td colspan="8" class="text-center">An error occurred while fetching data.</td></tr>';
                    });
            }

            function updateSortIcons(order = 'asc') {
                if (order === 'asc') {
                    sortNameAsc.style.display = 'none';
                    sortNameDesc.style.display = 'inline';
                } else if (order === 'desc') {
                    sortNameAsc.style.display = 'inline';
                    sortNameDesc.style.display = 'none';
                } else {
                    sortNameAsc.style.display = 'none';
                    sortNameDesc.style.display = 'none';
                }
            }

            searchInput.addEventListener('input', function () {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(function () {
                    updateTable();
                }, 300);
            });

            filterItems.forEach(item => {
                item.addEventListener('click', function () {
                    selectedCategory = this.dataset.category;
                    filterButton.innerHTML = `<i class="fas fa-filter"></i> ${this.textContent.trim()}`;
                    updateTable();
                });
            });

            sortNameAsc.addEventListener('click', function () {
                sortOrder = 'asc';
                updateSortIcons(sortOrder);
                updateTable();
            });

            sortNameDesc.addEventListener('click', function () {
                sortOrder = 'desc';
                updateSortIcons(sortOrder);
                updateTable();
            });

            updateTable();
        });
    </script>
}
